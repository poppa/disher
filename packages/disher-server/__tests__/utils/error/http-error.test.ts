import 'jest'

import * as HttpErrorMod from '../../../src/error/http-error'

const H = HttpErrorMod.HttpError

describe('utils/error/http-error', () => {
  test('Error codes should be ok', () => {
    expect(400).toEqual(H.BadRequest)
    expect(401).toEqual(H.Unauthorized)
    expect(402).toEqual(H.PaymentRequired)
    expect(403).toEqual(H.Forbidden)
    expect(404).toEqual(H.NotFound)
    expect(405).toEqual(H.MethodNotAllowed)
    expect(406).toEqual(H.NotAcceptable)
    expect(407).toEqual(H.ProxyAuthenticationRequired)
    expect(408).toEqual(H.RequestTimeout)
    expect(409).toEqual(H.Conflict)
    expect(410).toEqual(H.Gone)
    expect(411).toEqual(H.LengthRequired)
    expect(412).toEqual(H.PreconditionFailed)
    expect(413).toEqual(H.PayloadTooLarge)
    expect(414).toEqual(H.URITooLong)
    expect(500).toEqual(H.InternalServerError)
    expect(501).toEqual(H.NotImplemented)
    expect(502).toEqual(H.BadGateway)
    expect(503).toEqual(H.ServiceUnavailable)
  })

  test('isHttpError should work as expected', () => {
    const e1 = new H(H.NotFound)
    expect(HttpErrorMod.isHttpError(e1)).toBe(true)
    const e2 = new Error()
    expect(HttpErrorMod.isHttpError(e2)).toBe(false)
  })

  test('getStatusCode should work as expected', () => {
    const e1 = new H(H.NotFound)
    expect(HttpErrorMod.getStatusCode(e1)).toBe(404)
    const e2 = new Error()
    expect(HttpErrorMod.getStatusCode(e2)).toBe(undefined)
    const e3 = { status: 400 }
    expect(HttpErrorMod.getStatusCode(e3)).toBe(400)
  })

  test('Name of HttpError instance should reflect error code', () => {
    let e = new H(H.BadRequest)
    expect(e.name).toEqual('BadRequest')
    e = new H(H.Unauthorized)
    expect(e.name).toEqual('Unauthorized')
    e = new H(H.PaymentRequired)
    expect(e.name).toEqual('PaymentRequired')
    e = new H(H.Forbidden)
    expect(e.name).toEqual('Forbidden')
    e = new H(H.NotFound)
    expect(e.name).toEqual('NotFound')
    e = new H(H.MethodNotAllowed)
    expect(e.name).toEqual('MethodNotAllowed')
    e = new H(H.NotAcceptable)
    expect(e.name).toEqual('NotAcceptable')
    e = new H(H.ProxyAuthenticationRequired)
    expect(e.name).toEqual('ProxyAuthenticationRequired')
    e = new H(H.RequestTimeout)
    expect(e.name).toEqual('RequestTimeout')
    e = new H(H.Conflict)
    expect(e.name).toEqual('Conflict')
    e = new H(H.Gone)
    expect(e.name).toEqual('Gone')
    e = new H(H.LengthRequired)
    expect(e.name).toEqual('LengthRequired')
    e = new H(H.PreconditionFailed)
    expect(e.name).toEqual('PreconditionFailed')
    e = new H(H.PayloadTooLarge)
    expect(e.name).toEqual('PayloadTooLarge')
    e = new H(H.URITooLong)
    expect(e.name).toEqual('URITooLong')
    e = new H(H.InternalServerError)
    expect(e.name).toEqual('InternalServerError')
    e = new H(H.NotImplemented)
    expect(e.name).toEqual('NotImplemented')
    e = new H(H.BadGateway)
    expect(e.name).toEqual('BadGateway')
    e = new H(H.ServiceUnavailable)
    expect(e.name).toEqual('ServiceUnavailable')
  })
})
